USER_API=/user
DATABASE_URL=mongodb+srv://ajmeraaashu55:DwXOaQzBrlS3tP6l@cluster0.yyrl0w1.mongodb.net/EventManagment
PORT_NUMBER=3000
USER_SIGNUP=/userSignUp
USER_SIGNIN=/userSignIn
ADD_EVENT=/addEvent
EVENT_API=/event
OUR_EVENT=/ourEvent
UPDATE_EVENT=/updateEvent
ALL_EVENTS=/allEvents
DELETE_EVENT=/deleteEvent
USER_REGISTRATION=/userRegistration
USER_REGISTRAION_API=/userRegistrationapi
SEND_EMAIL=thegreatayurveda@gmail.com
SEND_EMAIL_PASSWORD=mscy bdjt dttl plbj
CHECK_REGISTRATION=/chekUserRagistration
CHECK_EVENTCOMPLETE=/checkEventComplete
FEEDBACK=/feedback
FEEDBACK_API=/createfeedback
SEE_FEEDBACK=/seeFeedback
SEE_USER_FEEDBACK=/seeUserFeedback
DELETE_USER_FEEDBACK=/deleteParticularFeedback
UPDATE_USER_FEEDBACK=/updateParticularFeedback



# // CHECK EVENT COMPLETE OR NOT
# export const checkEventComplete = async (req, res, next) => {
#   try {
#     const { _id } = req.body; // Extract event ID from the request body
#     const eventDetails = await UserEventDetailsModel.find({
#       eventId: _id,
#     }).populate("eventId"); // Fetch event details from the database

#     if (!eventDetails || eventDetails.length === 0) {
#       return res.status(203).json({ msg: "No user found for this event" });
#     }


#     // Get event date and time from the database as Date object
#     const eventDateObj = new Date(eventDetails[0].eventId.date); // Assuming this is a Date object
#     const eventTime = eventDetails[0].eventId.time; // Assume it's in 'hh:mm AM/PM' format

#     // Get current date and time
#     const currentDate = new Date();
#     const currentDateString = currentDate.toISOString().split("T")[0]; // YYYY-MM-DD format
#     const currentTimeString = convertTo12HourFormat(currentDate); // Convert current time to 12-hour format with AM/PM

#     // Format the event date to a string for comparison
#     const eventDateString = eventDateObj.toISOString().split("T")[0]; // Get YYYY-MM-DD format

#     // Compare the dates
#     if (currentDateString > eventDateString || currentDateString === eventDateString) {
#       // If dates are the same, compare the times
#       if (isCurrentTimeAfter(eventTime, currentTimeString)) {
#         return res.status(200).json({ msg: "Event is complete", eventDetails });
#       } else {
#         return res.status(201).json({ msg: "Event is not complete", eventDetails });
#       }
#     } else {
#       // If the current date is less than the event date, the event is not complete
#       return res.status(201).json({ msg: "Event is not complete", eventDetails });
#     }
#   } catch (error) {
#     return res.status(501).json({ msg: "Internal server error", error });
#   }
# };